#!/usr/bin/env node
const { version } = require('../package.json');
const program = require('commander');
const chokidar = require('chokidar');
const path = require('path');
const fs = require('fs');
const espack = require('../index');

const cwd = process.cwd();

program.version(version);

const dev = require('../lib/cli/dev');

program
  .option('-c, --clean', 'delete cache folder')

program
  .command('dev [media]')
  .description('编译文件, 默认配置: espack.config.js')
  .option('-f, --file <filename>', 'specify the file path of `espack.config.js`')
  .action(dev)

program
  .command('build [configfile]')
  .description('编译文件, 默认配置: espack.config.js')
  .action((configfile, options)=>{
    //
    // if(program.clean){
    //   fis.cache.clean();
    // }

    configfile = configfile || 'ale.config.js';

    configfile = path.join(cwd, configfile);

    let isExist = fs.existsSync(configfile);

    if(!fs.existsSync(configfile)){
      return log.error('can not find config file.');
    }

    let confObj = require(configfile);
    // let deps = getRequireDeps(configfile, true);

    let compiler = espack(confObj);

    // compiler.run((err, stats)=>{
    //   if (err) {
    //     console.error(err.stack || err);
    //     if (err.details) {
    //       console.error(err.details);
    //     }
    //     return;
    //   }
    //
    //   var info = stats.toString({
    //     chunks: false,  // Makes the build much quieter
    //     colors: true    // Shows colors in the console
    //   });
    //
    //   if (stats.hasErrors()) {
    //     console.error(info);
    //   }
    //
    // });

    // if(confObj.watch){
    //   let watcher = chokidar.watch(deps, {
    //     ignored: /node_modules/,
    //     persistent: true
    //   });
    //
    //   watcher.on('change', restart);
    //
    //   function restart (){
    //     delRequireCache(deps);
    //     watcher.unwatch(deps);
    //     b.destroy();
    //
    //     try {
    //       confObj = require(configfile);
    //       deps = getRequireDeps(configfile, true);
    //       b = espack(confObj);
    //       b.compile();
    //       watcher.add(deps);
    //       fis.log.info('Config file have changed.');
    //     }catch(e){
    //       fis.log.error(e.stack);
    //       watcher.add(deps);
    //     }
    //
    //   }
    // }


  });

  program
    .command('init [name]')
    .description('生成预配置文件: espack.config.js')
    .action((name, options)=>{
      name = name ? `espack.config.${name}.js` : 'espack.config.js';
      let configFile = path.join(cwd, name);

      if(_.exists(configFile)){
        fis.log.warn(`${name} is existed.`)
        return null;
      }

      // let data = _.read(path.join(__dirname, '../config.example.js'));
      //
      // _.write(configFile, data, 'utf8');

    });


// program
//   .command('install [repo]')
//   .alias('i')
//   .description('install')
//   .action((repo)=>{
//     console.log(2, repo);
//   });


program.parse(process.argv);




/**
 * getRequireDeps - 获取依赖
 *
 * @param  {type} filename description
 * @return {type}          description
 */
function getRequireDeps (filename, incldueSelf) {
  var result = [];
  if(incldueSelf){
    var cache = require.cache[filename];
    result.push(cache.filename);
  }
  getchildren(filename);

  return result;

  function getchildren (filename){
   var cache = require.cache[filename];
   cache.children.forEach(function(dep1){
     result.push(dep1.filename);
     return getchildren(dep1.filename);
   })
 }
}


/**
 * 删除缓存
 */

 function delRequireCache (files) {
   files.forEach(function(file){
     delete require.cache[file];
   })
 }
